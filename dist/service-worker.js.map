{"version":3,"file":"service-worker.js","mappingssources":["webpack://wingdings-converter/./background/service-worker.js"],"sourcesContent":["// Service Worker - Background処理\nclass WingdingsBackground {\n  constructor() {\n    this.dictionaryManager = new DictionaryManager();\n    this.init();\n  }\n\n  async init() {\n    await this.dictionaryManager.init();\n    this.setupContextMenus();\n    this.setupMessageHandlers();\n    this.setupTabHandlers();\n  }\n\n  setupContextMenus() {\n    chrome.contextMenus.removeAll(() => {\n      chrome.contextMenus.create({\n        id: 'wingdings-convert-page',\n        title: ' ページ全体をWingdingsに変換',\n        contexts: ['page']\n      });\n\n      chrome.contextMenus.create({\n        id: 'wingdings-revert-page', \n        title: '↩️ 元に戻す',\n        contexts: ['page']\n      });\n\n      chrome.contextMenus.create({\n        id: 'wingdings-add-word',\n        title: '➕ 選択文字を辞書に登録 \"%s\"',\n        contexts: ['selection']\n      });\n\n      chrome.contextMenus.create({\n        id: 'wingdings-show-mapping',\n        title: ' Wingdings対応表を表示',\n        contexts: ['page']\n      });\n    });\n  }\n\n  setupMessageHandlers() {\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n      this.handleMessage(message, sender, sendResponse);\n      return true; // 非同期レスポンス用\n    });\n  }\n\n  async handleMessage(message, sender, sendResponse) {\n    try {\n      switch (message.type) {\n        case 'CONVERT_PAGE':\n          await this.convertPage(sender.tab.id);\n          sendResponse({ success: true });\n          break;\n\n        case 'REVERT_PAGE':\n          await this.revertPage(sender.tab.id);\n          sendResponse({ success: true });\n          break;\n\n        case 'ADD_TO_DICTIONARY':\n          const result = await this.dictionaryManager.addWord(\n            message.kanji,\n            message.reading,\n            message.romaji\n          );\n          sendResponse({ success: true, data: result });\n          break;\n\n        case 'SEARCH_DICTIONARY':\n          const searchResults = await this.dictionaryManager.searchWords(\n            message.query,\n            message.limit || 50\n          );\n          sendResponse({ success: true, results: searchResults });\n          break;\n\n        case 'GET_STATISTICS':\n          const stats = this.dictionaryManager.getStatistics();\n          sendResponse({ success: true, statistics: stats });\n          break;\n\n        case 'EXPORT_DICTIONARY':\n          const blob = await this.dictionaryManager.exportDictionary();\n          const url = URL.createObjectURL(blob);\n          await chrome.downloads.download({\n            url: url,\n            filename: `wingdings-dictionary-${Date.now()}.json`,\n            saveAs: true\n          });\n          sendResponse({ success: true });\n          break;\n\n        case 'PLAY_SOUND':\n          this.playSound(message.soundId);\n          sendResponse({ success: true });\n          break;\n\n        default:\n          sendResponse({ success: false, error: 'Unknown message type' });\n      }\n    } catch (error) {\n      console.error('Message handling error:', error);\n      sendResponse({ success: false, error: error.message });\n    }\n  }\n\n  setupTabHandlers() {\n    // タブ更新時の処理\n    chrome.tabs.onUpdated.addListener(async (tabId, changeInfo, tab) => {\n      if (changeInfo.status === 'complete' && tab.url && !tab.url.startsWith('chrome://')) {\n        try {\n          await chrome.tabs.sendMessage(tabId, {\n            type: 'PAGE_LOADED',\n            url: tab.url\n          });\n        } catch (error) {\n          // Content script が読み込まれていない場合は無視\n          console.log('Content script not ready for tab:', tabId);\n        }\n      }\n    });\n\n    // アクティブタブ変更時の処理\n    chrome.tabs.onActivated.addListener(async (activeInfo) => {\n      await this.updateBadge(activeInfo.tabId);\n    });\n  }\n\n  async convertPage(tabId) {\n    await chrome.tabs.sendMessage(tabId, {\n      type: 'CONVERT_PAGE_REQUEST'\n    });\n    \n    await this.updateBadge(tabId, 'ON');\n  }\n\n  async revertPage(tabId) {\n    await chrome.tabs.sendMessage(tabId, {\n      type: 'REVERT_PAGE_REQUEST'\n    });\n    \n    await this.updateBadge(tabId, '');\n  }\n\n  async updateBadge(tabId, text = '') {\n    await chrome.action.setBadgeText({\n      tabId: tabId,\n      text: text\n    });\n    \n    await chrome.action.setBadgeBackgroundColor({\n      tabId: tabId,\n      color: text === 'ON' ? '#4CAF50' : '#FF9800'\n    });\n  }\n\n  playSound(soundId = '1') {\n    // 効果音再生（Audio APIを使用）\n    const audio = new Audio(chrome.runtime.getURL(`assets/sounds/${soundId}.mp3`));\n    audio.volume = 0.3;\n    audio.play().catch(error => {\n      console.log('Sound play failed:', error);\n    });\n  }\n}\n\n// Context Menu クリック処理\nchrome.contextMenus.onClicked.addListener(async (info, tab) => {\n  const background = new WingdingsBackground();\n  \n  switch (info.menuItemId) {\n    case 'wingdings-convert-page':\n      await background.convertPage(tab.id);\n      break;\n\n    case 'wingdings-revert-page':\n      await background.revertPage(tab.id);\n      break;\n\n    case 'wingdings-add-word':\n      if (info.selectionText) {\n        // 選択されたテキストを辞書登録UIに送信\n        await chrome.tabs.sendMessage(tab.id, {\n          type: 'SHOW_WORD_REGISTRATION',\n          selectedText: info.selectionText.trim()\n        });\n      }\n      break;\n\n    case 'wingdings-show-mapping':\n      await chrome.tabs.create({\n        url: chrome.runtime.getURL('assets/mapping-table.html')\n      });\n      break;\n  }\n});\n\n// 初期化\nconst wingdingsBackground = new WingdingsBackground();"],"names":[],"sourceRoot":""}