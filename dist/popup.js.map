{"version":3,"file":"popup.js","mappingssources":["webpack://wingdings-converter/./popup/popup.js"],"sourcesContent":["class WingdingsPopup {\n  constructor() {\n    this.converter = null;\n    this.isConverting = false;\n    this.init();\n  }\n\n  async init() {\n    await this.initializeConverter();\n    this.bindEvents();\n    await this.updateDictionaryStats();\n    this.updateCharCount();\n  }\n\n  async initializeConverter() {\n    // TextConverterをインポート\n    this.converter = new TextConverter();\n    await this.converter.init();\n  }\n\n  bindEvents() {\n    // 文字数カウント\n    const inputText = document.getElementById('inputText');\n    inputText.addEventListener('input', () => this.updateCharCount());\n\n    // 変換ボタン\n    document.getElementById('convertBtn').addEventListener('click', () => this.convertText());\n\n    // 対応表ボタン\n    document.getElementById('mappingBtn').addEventListener('click', () => this.showMapping());\n\n    // コピーボタン\n    document.getElementById('copyBtn').addEventListener('click', () => this.copyResult());\n\n    // ページ操作ボタン\n    document.getElementById('convertPageBtn').addEventListener('click', () => this.convertCurrentPage());\n    document.getElementById('revertPageBtn').addEventListener('click', () => this.revertCurrentPage());\n\n    // 辞書管理ボタン\n    document.getElementById('dictionaryBtn').addEventListener('click', () => this.openDictionary());\n\n    // ヘルプ・アバウト\n    document.getElementById('helpLink').addEventListener('click', () => this.showHelp());\n    document.getElementById('aboutLink').addEventListener('click', () => this.showAbout());\n\n    // エンターキーで変換\n    inputText.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        this.convertText();\n      }\n    });\n  }\n\n  updateCharCount() {\n    const inputText = document.getElementById('inputText');\n    const charCount = document.getElementById('charCount');\n    const currentLength = inputText.value.length;\n    \n    charCount.textContent = currentLength;\n    charCount.className = currentLength > 600 ? 'warning' : '';\n  }\n\n  async convertText() {\n    if (this.isConverting) return;\n    \n    const inputText = document.getElementById('inputText');\n    const convertBtn = document.getElementById('convertBtn');\n    const resultSection = document.getElementById('resultSection');\n    const resultText = document.getElementById('resultText');\n    \n    const text = inputText.value.trim();\n    if (!text) {\n      this.showNotification('テキストを入力してください', 'warning');\n      return;\n    }\n\n    try {\n      this.isConverting = true;\n      convertBtn.textContent = ' 変換中...';\n      convertBtn.disabled = true;\n\n      const startTime = performance.now();\n      const result = await this.converter.convert(text);\n      const endTime = performance.now();\n\n      resultText.textContent = result;\n      resultSection.style.display = 'block';\n      \n      // 変換時間を表示\n      const duration = Math.round(endTime - startTime);\n      this.showNotification(`変換完了 (${duration}ms)`, 'success');\n\n      // ガスター効果音再生\n      await chrome.runtime.sendMessage({\n        type: 'PLAY_SOUND',\n        soundId: 'gaster_convert'\n      });\n\n    } catch (error) {\n      console.error('Conversion error:', error);\n      this.showNotification('変換に失敗しました', 'error');\n      resultSection.style.display = 'none';\n    } finally {\n      this.isConverting = false;\n      convertBtn.textContent = ' 変換';\n      convertBtn.disabled = false;\n    }\n  }\n\n  async copyResult() {\n    const resultText = document.getElementById('resultText');\n    \n    try {\n      await navigator.clipboard.writeText(resultText.textContent);\n      this.showNotification('コピーしました', 'success');\n      \n      // コピーボタンのアニメーション\n      const copyBtn = document.getElementById('copyBtn');\n      copyBtn.textContent = '✅ コピー済み';\n      setTimeout(() => {\n        copyBtn.textContent = ' コピー';\n      }, 2000);\n    } catch (error) {\n      console.error('Copy failed:', error);\n      this.showNotification('コピーに失敗しました', 'error');\n    }\n  }\n\n  async convertCurrentPage() {\n    try {\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      await chrome.runtime.sendMessage({\n        type: 'CONVERT_PAGE',\n        tabId: tab.id\n      });\n      this.showNotification('ページ変換を開始しました', 'success');\n      window.close();\n    } catch (error) {\n      this.showNotification('ページ変換に失敗しました', 'error');\n    }\n  }\n\n  async revertCurrentPage() {\n    try {\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      await chrome.runtime.sendMessage({\n        type: 'REVERT_PAGE',\n        tabId: tab.id\n      });\n      this.showNotification('元に戻しました', 'success');\n      window.close();\n    } catch (error) {\n      this.showNotification('元に戻すことに失敗しました', 'error');\n    }\n  }\n\n  async updateDictionaryStats() {\n    try {\n      const response = await chrome.runtime.sendMessage({\n        type: 'GET_STATISTICS'\n      });\n      \n      if (response.success) {\n        const stats = response.statistics;\n        const statsElement = document.getElementById('dictStats');\n        statsElement.innerHTML = `\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">登録語数:</span>\n            <span class=\"stat-value\">${stats.totalWords.toLocaleString()}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">容量使用率:</span>\n            <span class=\"stat-value ${stats.storageUsage > 90 ? 'warning' : ''}\">${stats.storageUsage}%</span>\n          </div>\n        `;\n      }\n    } catch (error) {\n      console.error('Failed to get dictionary stats:', error);\n    }\n  }\n\n  async showMapping() {\n    await chrome.tabs.create({\n      url: chrome.runtime.getURL('assets/mapping-table.html')\n    });\n    window.close();\n  }\n\n  async openDictionary() {\n    await chrome.sidePanel.open({ tabId: (await chrome.tabs.query({ active: true, currentWindow: true }))[0].id });\n    window.close();\n  }\n\n  showHelp() {\n    chrome.tabs.create({\n      url: chrome.runtime.getURL('help.html')\n    });\n    window.close();\n  }\n\n  showAbout() {\n    const aboutContent = `\n Wingdings変換ツール v1.0.0\n\nUndertaleのガスターをイメージした、日本語・英語をWingdingsフォントに変換するChrome拡張機能です。\n\n【主な機能】\n• リアルタイム文字変換\n• ページ全体一括変換\n• 個人辞書登録・管理\n• クロスプラットフォーム対応\n\n【開発者】\nWingdingsDev Team\n\n【ライセンス】\nMIT License\n    `;\n    \n    alert(aboutContent);\n  }\n\n  showNotification(message, type = 'info') {\n    // 既存の通知があれば削除\n    const existingNotification = document.querySelector('.notification');\n    if (existingNotification) {\n      existingNotification.remove();\n    }\n\n    const notification = document.createElement('div');\n    notification.className = `notification ${type}`;\n    notification.textContent = message;\n    \n    document.body.appendChild(notification);\n\n    // 3秒後に自動削除\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification);\n      }\n    }, 3000);\n  }\n}\n\n// TextConverterクラス（簡易版）\nclass TextConverter {\n  constructor() {\n    this.tokenizer = null;\n    this.wingdingsMap = null;\n    this.emojiMap = null;\n  }\n\n  async init() {\n    // Wingdingsマップ読み込み\n    const mapResponse = await fetch(chrome.runtime.getURL('data/wingdings-map.json'));\n    const mapData = await mapResponse.json();\n    this.wingdingsMap = mapData.ascii_to_wingdings;\n    this.emojiMap = mapData.emoji_fallback;\n  }\n\n  async convert(text) {\n    let result = '';\n    \n    // 文字ごとに処理\n    for (let char of text) {\n      if (this.isJapanese(char)) {\n        // 日本語の場合は簡易変換（実際はKuromoji使用）\n        const romaji = this.simpleKanaToRomaji(char);\n        result += this.convertToWingdings(romaji);\n      } else if (this.isEnglish(char)) {\n        result += this.convertToWingdings(char.toUpperCase());\n      } else {\n        result += char; // その他の文字はそのまま\n      }\n    }\n    \n    return result;\n  }\n\n  isJapanese(char) {\n    const code = char.charCodeAt(0);\n    return (code >= 0x3040 && code <= 0x309F) || // ひらがな\n           (code >= 0x30A0 && code <= 0x30FF) || // カタカナ\n           (code >= 0x4E00 && code <= 0x9FAF);   // 漢字\n  }\n\n  isEnglish(char) {\n    return /[A-Za-z]/.test(char);\n  }\n\n  convertToWingdings(char) {\n    // フォント対応チェック（簡易版）\n    const isWingdingsSupported = this.checkWingdingsSupport();\n    \n    if (isWingdingsSupported && this.wingdingsMap[char]) {\n      return this.wingdingsMap[char];\n    } else if (this.emojiMap[char]) {\n      return this.emojiMap[char];\n    }\n    \n    return char;\n  }\n\n  checkWingdingsSupport() {\n    // 簡易的なフォント対応チェック\n    return navigator.platform.indexOf('Win') !== -1;\n  }\n\n  simpleKanaToRomaji(char) {\n    const kanaMap = {\n      'あ': 'A', 'い': 'I', 'う': 'U', 'え': 'E', 'お': 'O',\n      'か': 'K', 'き': 'K', 'く': 'K', 'け': 'K', 'こ': 'K',\n      // 簡易マッピング（実際はより詳細）\n    };\n    \n    return kanaMap[char] || char.toUpperCase();\n  }\n}\n\n// 初期化\ndocument.addEventListener('DOMContentLoaded', () => {\n  new WingdingsPopup();\n});"],"names":[],"sourceRoot":""}