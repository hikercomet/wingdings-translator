{"version":3,"file":"popup/popup.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://wingdings-converter/./popup/popup.js"],"sourcesContent":["class WingdingsPopup {\n  constructor() {\n    this.bindEvents();\n    this.getDictionaryStats();\n  }\n\n  bindEvents() {\n    document.getElementById('convertBtn').addEventListener('click', () => this.convertText());\n    document.getElementById('convertFromBtn').addEventListener('click', () => this.convertFromWingdings());\n    document.getElementById('convertPageBtn').addEventListener('click', () => this.sendMessageToContentScript({ type: 'CONVERT_PAGE_REQUEST' }));\n    document.getElementById('revertPageBtn').addEventListener('click', () => this.sendMessageToContentScript({ type: 'REVERT_PAGE_REQUEST' }));\n    document.getElementById('dictionaryBtn').addEventListener('click', () => this.openSidePanel());\n    document.getElementById('mappingBtn').addEventListener('click', () => this.openMappingTable());\n\n    const inputText = document.getElementById('inputText');\n    const charCount = document.getElementById('charCount');\n    inputText.addEventListener('input', () => {\n      const count = inputText.value.length;\n      charCount.textContent = count;\n      charCount.classList.toggle('warning', count > 600);\n    });\n  }\n\n  async getDictionaryStats() {\n    const statsElement = document.getElementById('dictStats');\n    try {\n      const response = await chrome.runtime.sendMessage({ type: 'GET_STATISTICS' });\n      if (response && response.success) {\n        const stats = response.statistics;\n        statsElement.innerHTML = `\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">登録単語数:</span>\n            <span class=\"stat-value\">${stats.totalWords}</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">ストレージ使用率:</span>\n            <span class=\"stat-value ${stats.storageUsage > 80 ? 'warning' : ''}\">${stats.storageUsage}%</span>\n          </div>\n        `;\n      } else {\n        statsElement.textContent = '統計の取得に失敗しました。';\n      }\n    } catch (error) {\n      console.error('Error getting dictionary stats:', error);\n      statsElement.textContent = 'エラーが発生しました。';\n    }\n  }\n\n  async openSidePanel() {\n    try {\n      await chrome.sidePanel.open({ windowId: (await chrome.windows.getCurrent()).id });\n    } catch (e) {\n      console.error(\"Error opening side panel:\", e);\n    }\n  }\n  \n  async openMappingTable() {\n    await chrome.tabs.create({ url: chrome.runtime.getURL('assets/mapping-table.html') });\n  }\n\n  async convertText() {\n    const text = document.getElementById('inputText').value.trim();\n    if (!text) return;\n    const response = await this.sendMessageToContentScript({ type: 'CONVERT_TEXT', text });\n    if (response && response.success) {\n      document.getElementById('resultText').textContent = response.convertedText;\n      document.getElementById('resultSection').style.display = 'block';\n    }\n  }\n\n  async convertFromWingdings() {\n    const text = document.getElementById('wingdingsInput').value.trim();\n    if (!text) return;\n    const response = await this.sendMessageToContentScript({ type: 'CONVERT_FROM_WINGDINGS', text });\n    if (response && response.success) {\n      document.getElementById('reverseResultText').textContent = response.convertedText;\n      document.getElementById('reverseResultSection').style.display = 'block';\n    }\n  }\n\n  async sendMessageToContentScript(message) {\n    try {\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      if (tab && tab.id) {\n        return await chrome.tabs.sendMessage(tab.id, message);\n      }\n    } catch (e) {\n      console.error(\"Could not send message to content script:\", e);\n    }\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => new WingdingsPopup());"],"names":[],"sourceRoot":""}